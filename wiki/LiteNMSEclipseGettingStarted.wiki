#summary A brief guide to assist in Getting started developing LiteNMS in Eclipse.
#labels Featured

= Introduction =

In order to develop LiteNMS you will need the following pieces of Software:

  * Eclipse 3.3 (Europa)
  * Maven Plugin for Eclipse
  * Subclipse for Subversion access
  * (Optional) A Linux shell is ideal for development of LiteNMS as it will simplify the entire build process.  Moreover, most if not all of the build scripts supplied with LiteNMS are made for Linux/BSD.

== Eclipse 3.3 Europa ==

Eclipse is a powerful Integrated Development Environment (IDE) for developing applications.  Eclipse is a very versatile IDE based on the concept of adding bundles (plugins) in run-time based on OSGi.  You can dowload at:  http://www.eclipse.org

There are many different versions available, for example, J2EE edition, C++ edition, etc...  Since LiteNMS is written in Java it is recommended that the J2EE edition is downloaded.  This can be found here (Linux version):  http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/20071103/eclipse-jee-europa-fall2-linux-gtk.tar.gz

== Maven 2 Plugin ==

The build system of LiteNMS uses Maven.  Maven is an advanced project build tool, which can be considered as the Object Oriented version of Ant.  Maven is great at managing complex dependencies which is ideal for LiteNMS as it uses many 3rd party libraries.

To assist with development you can add a Maven 2 plugin to Eclipse.  This will allow you to run Maven goals (compile options) on the project directly from within Eclipse with no need for a command-line.  However, you should keep in mind that building the project from within Eclipse is magnitudes slower then from the command-line in Linux.

It is preferred that you install the Maven 2 plugin by using the Eclipse update site.  Eclipse has the ability to add plugins via a simple utility.  To install the Maven 2 plugin, perform the following steps:

 * *STEP 1:*  Open Eclipse and navigate to the Help -> Software Updates -> Find and Install...
 * *STEP 2:*  When the Window appears, click the radio button that says 'Search for new features to Install', and click Next.
 * *STEP 3:*  Click the 'New Remote Site...' button and in the window that appears add for the name "Maven 2 Plugin'  and the url "http://m2eclipse.codehaus.org/".
 * *STEP 4:*  Click Ok and then click Next.  You should be asked a series of questions, Agree and continue with downloading/installation.

== Subclipse Eclipse Subversion Plugin ==

The Subclipse plugin is used to access code stored within an SVN repository.  SVN is a very powerful source code revisioning system that allows for complex code merges, code branching and code reversion to older versions.

Installing the Subclipse plugin for Eclipse can be accomplished by following the same procedure for the Maven 2 plugin.  Instead, the name will be 'Subclipse 1.2.x (Eclipse 3.2+)' and the url will be 'http://subclipse.tigris.org/update_1.2.x'.  For a further detailed set of instructions you can refer to [http://subclipse.tigris.org/install.html Subclipse Installation].

== Linux/BSD ==

Ideally, to build/develop for LiteNMS, you should use a Linux/BSD operating system.  Linux/BSD provides a suite of tools out-of-the-box that are indispensable as a developer.  However, if would prefer to use a Windows variant for your development, it is not impossilbe.  First of all, you will need to download Cygwin.  Cygwin is a Linux emulator for Windows which uses a simple dynamic link library (dll) or shared library to access the underlying Windows operating system.  Cygwin can provide all the tools you will need to develop LiteNMS.  You can download Cygwin from: http://cygwin.com/

= First Steps =

So now you should have your development environment setup with the required plugins.  You will need to perform the following steps:

 * Check the code out of the SVN
 * Run the setup.sh script, which will setup your environment.  It will create the needed directories as well as install some LiteNMS dependencies into your local Maven repository.
 * Perform your first 'in Eclipse build' (Alternatively, you can build from the command-line if desired).
 * Add the Maven dependencies to the build path.
 * Update your source folders.

Each step is covered in detail below:

== Check out from SVN ==
 # First, add the google SVN to the subclipse SVN list.  This can be accomplished by clicking the little repository button at the top of the browse pane.
 # Navigate to the trunk of the repository.  Right-click on it and go to checkout.
 # A window will appear. Make sure the 'Check out as a project configured using the New Project Wizard'.  Click Finish.
 # The new project window should appear.  Enter the name of the project and click next.

= Encountered Problems =

Here are some of the most common problems I have encountered.

1.  _Maven plugin does not work_:  Most of the time this is because the plugin can not find the Maven local repository, usually installed under {User HOME}/.m2/repository.  If you create this directory and then execute export MAVEN_HOME = "{USER_HOME}/.m2/"  it should correct the issue, where {USER_HOME} equals your home directory.  To make my life easier, I usually add the following lines to my .bashrc file so that they are set automatically on system startup:

{{{
export JAVA_OPTS="-Xms512m -Xmx1024m"
export JAVA_HOME=/usr/lib/jvm/java-1.5.0-sun
export MAVEN_HOME=/home/bstimpson/.m2
export MAVEN_OPTS=-Xmx1024m
}}}

*NOTE:*  You may want to adjust some of the memory values in the above options to match the amount of system memory available (i.e. if you have 512Mb ram, set -Xms40m -Xmx 256).

= Plugins Summary =

Here is a brief summary of all the plugins I use in Eclipse:
{{{
Name:  Maven 2 Plugin
Url: http://m2eclipse.codehaus.org/

Name: Subclipse 1.2.x (Eclipse 3.2+)
Url: http://subclipse.tigris.org/update_1.2.x
}}}